[
  {
    "objectID": "posts/worldcup.html",
    "href": "posts/worldcup.html",
    "title": "FIFA World Cup",
    "section": "",
    "text": "Inspired by the November 29, 2022 Tidy Tuesday dataset on FIFA World Cup matches played in its history from Uruguay in 1930 to Russia in 2018. I primarily wanted to take a look at total goals scored, frequency of winners and increase in attendance.\n\n\nThe first thing I wanted to explore was the correlation, if any, between the amount of goals scored in all world cup games and the amount of fans in the stands. It definitely appears that as attendance increases goals also increase.\n\n\nBehind the scenes\nworldcups %>%\n  ggplot(aes(x=goals_scored, y=attendance/1000, color=winner,text=winner))+\n  geom_point()+ \n  labs(\n    title = \"More Fans = More Goals?\",\n    subtitle = \"A look at the correlation between fans in attendance and # of goals scored.\",\n    plot.title = element_text(face=\"bold\"),\n    x = \"Goals Scored\",\n    y = \"Attendance (in thousands)\",\n    color = \"Winning Country\",\n    size=\"\"\n    )+\n  scale_color_brewer(palette = \"Paired\")\n\n\n\n\n\n\n\n\nI also wanted to explore who the top winners were throughout the history of the World Cup.\n\n\nBehind the scenes\nworldcups %>%\n  ggplot(aes(x=forcats::fct_rev(fct_infreq(winner)),text=winner,fill=winner))+\n  geom_bar(stat=\"count\")+ \n  labs(\n    title = \"Winningest Countries of All Time\",\n    plot.title = element_text(face=\"bold\"),\n    legend.title = element_text(margin = margin(0, 0, 15, 0)),\n    legend.position = \"right\",\n    legend.justification = \"top\",\n    x = \"Country\",\n    y = \"# of World Cup Wins\",\n    color = \"Winning Country\",\n    size=\"\"\n    )+\n  coord_flip()+\n  scale_fill_brewer(palette = \"Paired\")+\n  theme(legend.position=\"none\")"
  },
  {
    "objectID": "posts/goat.html#who-is-the-goat",
    "href": "posts/goat.html#who-is-the-goat",
    "title": "The Quest for the GOAT",
    "section": "Who is the GOAT?",
    "text": "Who is the GOAT?\nFor decades armchair athletes have been debating, who is the the greatest basketball player of all time: LeBron James, Kobe Bryant or Michael Jordan.\nBut who really is the GOAT? Based on our analysis it is clear who the best player of all times is and we can finally put these debates to rest."
  },
  {
    "objectID": "posts/goat.html#the-data",
    "href": "posts/goat.html#the-data",
    "title": "The Quest for the GOAT",
    "section": "The Data",
    "text": "The Data\nWe based our findings off of various datasets from Kaggle.com.\n\nNBA Players stats from 1950-2017\nMichael Jordan, Kobe Bryant and LeBron James stats through 2019"
  },
  {
    "objectID": "posts/goat.html#back-to-basics",
    "href": "posts/goat.html#back-to-basics",
    "title": "The Quest for the GOAT",
    "section": "Back to Basics",
    "text": "Back to Basics\nFirst we looked at some basic aggregates to see if a top player emerged.\n\n\n\nMichael Jordan\n\n15 seasons\n1072 games\n6 NBA championships\n5x NBA MVP\n14x NBA All-Star\n32,292 career points\n30.1 PPG\n\n\n\n\nKobe Bryant\n\n20 seasons\n1,346 games\n5 NBA championships\n1x NBA MVP\n18x NBA All-Star\n33,643 career points\n25 PPG\n\n\n\n\nLeBron James\n\n20 seasons & counting\n1,378 games\n4 NBA championships\n4x NBA MVP\n18x NBA All-Star\n37,371 career points\n27.1 PPG\n\n\n\n\nWhat does this mean? Still no clear winner based on these initial statistics."
  },
  {
    "objectID": "posts/goat.html#more-advanced-statistics",
    "href": "posts/goat.html#more-advanced-statistics",
    "title": "The Quest for the GOAT",
    "section": "More advanced statistics",
    "text": "More advanced statistics\n\n\nBehind the scenes\ngoat.sub <- goat %>% \n  group_by(player) %>%\n  select(player, playereffrating,trueshootingperc,freethrowrate,winshare,overallbpm,valueoverreplace)%>%\n  summarise(across(everything(), mean))\n\ngoat.sub <- goat.sub %>%\n  mutate(playereffrating=round(playereffrating,2)) %>%\n  mutate(trueshootingperc=round(trueshootingperc*100,2))%>%\n  mutate(freethrowrate=round(freethrowrate*100,2))%>%\n  mutate(winshare=round(winshare,2))%>%\n  mutate(overallbpm=round(overallbpm,2))%>%\n  mutate(valueoverreplace=round(valueoverreplace,2))\n         \nft <- flextable(goat.sub)\nft <- set_header_labels(ft,\n  values = list(\n    player = \"Player\",\n    playereffrating = \"Player Efficiency Rating\",\n    trueshootingperc = \"True Shooting %\",\n    freethrowrate = \"Free Throw Rate\",\n    winshare = \"Win Share\",\n    overallbpm = \"Overall BPM\",\n    valueoverreplace = \"Value Over Replacement\"\n  )\n)\nft <- theme_booktabs(ft)\nft <- align( ft, align = \"center\", part = \"all\" )\nft <- bold(ft, part = \"header\") # bold header\nft <- bg(ft, i = ~ playereffrating > 27.9 & trueshootingperc > .58 & freethrowrate > 43 & winshare > 9.5 & overallbpm > 10 & valueoverreplace > 5, \n        j = ~ playereffrating + trueshootingperc + freethrowrate + winshare + overallbpm + valueoverreplace, \n        bg = \"wheat\", part = \"body\")\nft\n\n\n\nPlayerPlayer Efficiency RatingTrue Shooting %Free Throw RateWin ShareOverall BPMValue Over ReplacementKobe Bryant21.4054.1337.495.743.042.47Lebron James27.9458.4943.049.5810.065.61Michael Jordan27.8456.3438.609.068.654.55"
  },
  {
    "objectID": "posts/goat.html#lets-get-advanced",
    "href": "posts/goat.html#lets-get-advanced",
    "title": "The Quest for the GOAT",
    "section": "Let’s Get Advanced",
    "text": "Let’s Get Advanced\nWe turned to various advanced statistics for more clarity and chose to look at each players Box Plus-Minus(BPM) throughout their careers.\nBPM is a metric that:\n\nis derived from a player’s own statistics (points, rebounds, and assists, etc.), along with their position, and overall team performance\nestimates a player’s contribution to the team when that player is on the court in points above the NBA average, which is 0\nExample: a BPM of +5 means that per game, the team is 5 points better with the player on the court than with the average NBA player"
  },
  {
    "objectID": "posts/goat.html#bpm-individual-player-vs.-team",
    "href": "posts/goat.html#bpm-individual-player-vs.-team",
    "title": "The Quest for the GOAT",
    "section": "BPM: Individual Player vs. Team",
    "text": "BPM: Individual Player vs. Team\nHow do they stack up against their teammates each season?\n\n\nBehind the scenes\n#remove all * from the Player column\nfullnba$Player<- gsub(\"[*]\", \"\", fullnba$Player)\n#convert season to year\ngoat$season<-as.Date(goat$season, format=\"%Y\")\ngoat$year<-year(goat$season)\n\n#define custom colors\nbullsred = \"#CE1141\"\nlakeryellow = \"#FDB927\"\nlakerpurple = \"#552583\"\ncavswine = \"#6f263d\"\ncavsgold = \"#ffb81c\"\nmiamigold = \"#F9A01B\"\nmiamired = \"#98002E\"\n\n#filter dataset for specific players\njustmj<-filter(goat, player == \"Michael Jordan\")%>%\n  group_by(year) %>%\n  summarise(mean = mean(overallbpm, na.rm=TRUE))\njustkb<-filter(goat, player == \"Kobe Bryant\")%>%\n  group_by(year) %>%\n  summarise(mean = mean(overallbpm, na.rm=TRUE))\njustlj<-filter(goat, player == \"Lebron James\", between(year, 2003, 2017))%>%\n  group_by(year) %>%\n  summarise(mean = mean(overallbpm, na.rm=TRUE))\n\nwizbpm<-filter(fullnba, Player != \"Michael Jordan\", Tm == \"WAS\", between(Year, 2001, 2002))\ncavbpm<-filter(fullnba, Player != \"LeBron James\", Tm == \"CLE\", between(Year, 2003, 2009)) \nmiabpm<-filter(fullnba, Player != \"LeBron James\", Tm == \"MIA\", between(Year, 2010, 2013))\ncav2bpm<-filter(fullnba, Player != \"LeBron James\", Tm == \"CLE\", between(Year, 2014, 2017))\nlakbpm<-filter(fullnba, Player != \"LeBron James\", Tm == \"LAL\", between(Year, 2017, 2018))\n\n#plots\n#Michael Jordan\nmj<-fullnba %>%\n  filter(Player != \"Michael Jordan\", Tm == \"CHI\", between(Year, 1983, 2000)) %>%\n  ggplot(aes(x=Year, y=BPM, fill=\"black\"))+\n    geom_point(alpha=.2, size=2)+\n    geom_point(data=wizbpm, aes(x=Year, y=BPM), alpha=.2, size=2, fill=\"black\")+\n    geom_point(data=justmj, aes(x=year, y=mean, color=bullsred), size=3)+\n    scale_colour_manual(values = bullsred)+\n    scale_x_continuous(breaks=seq(1983, 2002, 1))+\n    geom_hline(yintercept = 0, alpha=.1, size=2, linetype=\"solid\")+\n    geom_vline(xintercept = 1993, alpha=.05, size=8, linetype=\"solid\")+\n    geom_vline(xintercept = 1999, alpha=.05, size=40, linetype=\"solid\")+\n    geom_point(aes(x=1990, y=12.3),color='black', fill=bullsred, size=3, shape=21)+\n    geom_point(aes(x=1991, y=9.1),color='black', fill=bullsred, size=3, shape=21)+\n    geom_point(aes(x=1992, y=10.2),color='black', fill=bullsred, size=3, shape=21)+\n    geom_point(aes(x=1995, y=8.35),color='black', fill=bullsred, size=3, shape=21)+\n    geom_point(aes(x=1996, y=7.7),color='black', fill=bullsred, size=3, shape=21)+\n    geom_point(aes(x=1997, y=5.4),color='black', fill=bullsred, size=3, shape=21)+\n    annotate(\"text\", x = 1993, y = 15, label = \"RETIRED\", family=\"sans\", size=3)+\n    annotate(\"text\", x = 1999, y = 15, label = \"RETIRED\", family=\"sans\", size=3)+\n    theme_minimal()+\n    theme(\n      legend.position=\"none\",\n      panel.grid.minor = element_blank(),\n      panel.grid.major = element_blank(),\n    axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),\n    axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)),\n    plot.title = element_text(margin = margin(t = 0, r = 0, b = 20, l = 0))\n      )+\n    labs(\n      title=\"Michael Jordan v. Bulls (1983-2000) & Wizards (2001-2002)\",\n      y=\"BPM\",\n      x=\"Season (Starting Year)\"\n    )\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nBehind the scenes\n#Kobe Bryant\nkb<-fullnba %>%\n  filter(Player != \"Kobe Bryant\", Tm == \"LAL\", between(Year, 1996, 2015)) %>%\n  ggplot(aes(x=Year, y=BPM, fill=\"black\"))+\n    geom_point(alpha=.2, size=2)+\n    geom_point(data=justkb, aes(x=year, y=mean, color=lakeryellow), size=3)+\n    scale_colour_manual(values = lakeryellow)+\n    scale_x_continuous(breaks=seq(1996, 2015, 1))+\n    geom_hline(yintercept = 0, alpha=.1, size=2, linetype=\"solid\")+\n    geom_vline(xintercept = 2013, alpha=.05, size=8, linetype=\"solid\")+\n    geom_point(aes(x=1999, y=4.3),color=lakerpurple, fill=lakeryellow, size=3, shape=21)+\n    geom_point(aes(x=2000, y=5.75),color=lakerpurple, fill=lakeryellow, size=3, shape=21)+\n    geom_point(aes(x=2001, y=3.85),color=lakerpurple, fill=lakeryellow, size=3, shape=21)+\n    geom_point(aes(x=2008, y=6),color=lakerpurple, fill=lakeryellow, size=3, shape=21)+\n    geom_point(aes(x=2009, y=4.75),color=lakerpurple, fill=lakeryellow, size=3, shape=21)+\n    annotate(\"text\", x = 2013, y = 15, label = \"INJURED\", family=\"sans\", size=3)+\n    theme_minimal()+\n    theme(\n      legend.position=\"none\",\n      panel.grid.minor = element_blank(),\n      panel.grid.major = element_blank(),\n    axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),\n    axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)),\n    plot.title = element_text(margin = margin(t = 0, r = 0, b = 20, l = 0))\n      )+\n    labs(\n      title=\"Kobe v. Lakers (1996-2015)\",\n      y=\"BPM\",\n      x=\"Season (Starting Year)\"\n    )\n\n\n#LeBron James\nlj<-cavbpm %>%\n  ggplot(aes(x=Year, y=BPM, fill=\"black\"))+\n    geom_point(alpha=.2, size=2)+\n    geom_point(data=cav2bpm, aes(x=Year, y=BPM), alpha=.2, size=2, fill=\"black\")+\n    geom_point(data=miabpm, aes(x=Year, y=BPM), alpha=.2, size=2, fill=\"black\")+\n    geom_point(data=lakbpm, aes(x=Year, y=BPM), alpha=.2, size=2, fill=\"black\")+\n    geom_point(data=justlj, aes(x=year, y=mean, color=cavswine), size=3)+\n    scale_colour_manual(values = cavswine)+\n    scale_x_continuous(breaks=seq(2003, 2018, 1))+\n    geom_hline(yintercept = 0, alpha=.1, size=2, linetype=\"solid\")+\n    geom_point(aes(x=2011, y=11),color=cavsgold, fill=cavswine, size=4, shape=21)+\n    geom_point(aes(x=2012, y=10.9),color=cavsgold, fill=cavswine, size=4, shape=21)+\n    geom_point(aes(x=2015, y=11.1),color=cavsgold, fill=cavswine, size=4, shape=21)+\n    theme_minimal()+\n    theme(\n      legend.position=\"none\",\n      panel.grid.minor = element_blank(),\n      panel.grid.major = element_blank(),\n    axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),\n    axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)),\n    plot.title = element_text(margin = margin(t = 0, r = 0, b = 20, l = 0))\n      )+\n    labs(\n      title=\"LeBron v. Caveliers (2003-2009 & 2014-2017), Heat (2010-2013) & Lakers (2017)\",\n      y=\"BPM\",\n      x=\"Season (Starting Year)\"\n    )\n\n\n\nMichael JordanKobe ByrantLeBron James\n\n\n\n\n\n\nBehind the scenes\nplot(mj)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBehind the scenes\nplot(kb)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBehind the scenes\nplot(lj)"
  },
  {
    "objectID": "posts/goat.html#bpm-goat-v-goat",
    "href": "posts/goat.html#bpm-goat-v-goat",
    "title": "The Quest for the GOAT",
    "section": "BPM: GOAT v GOAT",
    "text": "BPM: GOAT v GOAT"
  },
  {
    "objectID": "posts/goat.html#the-goat-is-revealed",
    "href": "posts/goat.html#the-goat-is-revealed",
    "title": "The Quest for the GOAT",
    "section": "The GOAT is Revealed",
    "text": "The GOAT is Revealed\nWith a career average BPM of 8.1 and solid performance in both regular season and playoff games, LeBron James is called King James for a reason."
  },
  {
    "objectID": "posts/wines.html",
    "href": "posts/wines.html",
    "title": "Pinots and Points",
    "section": "",
    "text": "I wanted to take a look at some wines from 2015, and see what countries have the most wines above 90 points but below $25.\n\n\nBehind the scenes\ng <- allwine %>% \n  filter((price < 26) & (points > 90) & (year == \"2015\")) %>%\n  ggplot(aes(x=price, y=points, tooltip = country, data_id = country)) +\n  geom_jitter_interactive(size = 1, hover_nearest = TRUE)+\n  labs(\n    title = \"Quality wines on a budget\",\n    subtitle = \"A look at 2015 wines over 90 points and under $25.\",\n    plot.title = element_text(face=\"bold\"),\n    x = \"Price\",\n    y = \"Points\"\n    )\n\n  girafe(ggobj = g,\n       options = list(\n         opts_hover_inv(css = \"opacity:0.1;\"),\n         opts_hover(css = \"fill:darkred;stroke:darkred;r:1pt;\"),\n         opts_selection(only_shiny = FALSE, type = \"single\", css = \"fill:darkred;stroke:darkred;r:1pt;\")\n       ))"
  },
  {
    "objectID": "posts/fightsongs.html#plot-recreation",
    "href": "posts/fightsongs.html#plot-recreation",
    "title": "Let’s Recreate: Fight Songs",
    "section": "Plot Recreation",
    "text": "Plot Recreation\nThis was part of an assignment to take a FiveThirtyEight chart and see how close we could get to the original.\n\n\nBehind the scenes\njustOregon<-subset(fight.songs,fight.songs$school==\"Oregon State\")\n\nggplot(data=fight.songs, aes(x=sec_duration, y=bpm, color=hex))+\n  geom_point(alpha=.2, size=4)+\n  scale_x_continuous(breaks=c(0,20,40,60,80,100,120,140,160,180), limits=c(0,180))+\n  scale_y_continuous(breaks=c(60,80,100,120,140,160,180,200), limits=c(40,200))+\n  geom_point(data=justOregon, aes(x=sec_duration, y=bpm, fill=\"#DC4405\", color=\"#000000\"), shape=21, size=4, stroke = 1)+\n  geom_text(data=justOregon, aes(label=school, fontface=\"bold\"), position = position_nudge(y = 12)) +\n  geom_hline(yintercept = mean(fight.songs$bpm), linetype='dotted', color=\"black\")+\n  geom_vline(xintercept = mean(fight.songs$sec_duration), linetype='dotted', color=\"black\")+\n  scale_color_manual(values=fight.songs$hex)+\n  labs(\n    title = \"How the Oregon State fight song stacks up\",\n    x = \"Duration\",\n    y = \"Beats per minute\"\n  ) +\n  guides(color=\"none\",fill=\"none\")+\n  theme_minimal()+\n  theme(\n    panel.grid.minor = element_blank(),\n    aspect.ratio=3/4,\n    axis.title = element_text(face=\"bold\"),\n    title = element_text(face=\"bold\"),\n  )+\n  annotate(\"text\", x = 30, y = 190, label = \"Fast and short\", family=\"mono\")+\n  annotate(\"text\", x = 160, y = 190, label = \"Fast but long\", family=\"mono\")+\n  annotate(\"text\", x = 30, y = 45, label = \"Slow but short\", family=\"mono\")+\n  annotate(\"text\", x = 160, y = 45, label = \"Slow and long\", family=\"mono\")"
  },
  {
    "objectID": "posts/fightsongs.html#alternative-plot",
    "href": "posts/fightsongs.html#alternative-plot",
    "title": "Let’s Recreate: Fight Songs",
    "section": "Alternative Plot",
    "text": "Alternative Plot\nThe next step in the assignment was to come up with an alternate plot using the data provided. I thought it might be interesting to look at the number of times the word “fight” was actually used in school fight songs, by conference.\n\n\nBehind the scenes\nfight.songs %>% \n  group_by(conference) %>% \n  summarise(sumfight = sum(number_fights)) %>% \n  ggplot(aes(x = conference, y = sumfight, fill = conference)) +\n  geom_col()+\n  theme_minimal()+\n  theme(\n    panel.grid.minor = element_blank(),\n    axis.title = element_text(face=\"bold\"),\n    title = element_text(face=\"bold\"),\n  )+\n  scale_fill_brewer(palette=\"Set1\")+\n  labs(\n    title = \"How many times the song says fight by Conference\",\n    x = \"Conference\",\n    y = \"Number of times the song says fight\",\n    fill=\"Conference\"\n  )"
  },
  {
    "objectID": "posts/fightsongs.html#interaction",
    "href": "posts/fightsongs.html#interaction",
    "title": "Let’s Recreate: Fight Songs",
    "section": "Interaction",
    "text": "Interaction\nThe final step in the process was to create an interactive plot. This is a shiny app that uses plotly for some interaction.\n\n\nBehind the scenes\nlibrary(shiny)\nlibrary(plotly)\n\n#import data\nfight.songs <-\n  read.csv(\"https://raw.githubusercontent.com/kitadasmalley/DATA502/main/FALL2022/Data/fight_songs_HKS.csv\", stringsAsFactors=FALSE)\n\n# Define UI \nui <- fluidPage(\n  tags$style(\n    \"h2 {\n      font-family: Helvetica, Arial, sans-serif;\n      font-weight: 600;\n    }\n    p{\n    margin-bottom: 0;\n    }\n    hr{\n    margin: 14px 0;\n    border-top: 1px solid #333;\n    }\n    \"\n  ),\n  # Application title\n  titlePanel(\"Our Guide To The Exuberant Nonsense Of College Fight Songs\"),\n  \n  # Sidebar with a slider input the year \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"school\", \n                  h4(\"Choose your school:\"), \n                  choices = c(\"\", unique(fight.songs$school)), \n                  selected = NULL, \n                  multiple = FALSE),\n      htmlOutput(\"text1\")\n    ),\n    # the school scatterplot\n    mainPanel(\n      plotlyOutput(\"bandPlot\")\n    )\n  )\n)\n\n# Define server \nserver <- function(input, output) {\n  \n  output$bandPlot <- renderPlotly({\n    justSelected<-subset(fight.songs,fight.songs$school==input$school)\n    p<-fight.songs%>%\n      ggplot(aes(x=sec_duration, y=bpm))+\n      geom_point(aes(text=school),alpha=.2, size=4, color=fight.songs$hex)+\n      scale_x_continuous(breaks=c(0,20,40,60,80,100,120,140,160,180), limits=c(0,180))+\n      scale_y_continuous(breaks=c(60,80,100,120,140,160,180,200), limits=c(40,200))+\n      geom_point(data=justSelected, aes(x=sec_duration, y=bpm), color=justSelected$hex, size=4)+\n      geom_text(data=justSelected, aes(x=sec_duration, y=bpm, label=school, face = 2), nudge_y =10)+\n      geom_hline(yintercept = mean(fight.songs$bpm), linetype='dotted', color=\"black\")+\n      geom_vline(xintercept = mean(fight.songs$sec_duration), linetype='dotted', color=\"black\")+\n      scale_color_manual(values=fight.songs$hex)+\n      labs(\n        title = paste(\"How the\",input$school,\"fight song stacks up\"),\n        x = \"Duration\",\n        y = \"Beats per minute\"\n      ) +\n      guides(color=\"none\",fill=\"none\")+\n      theme_minimal()+\n      theme(\n        panel.grid.minor = element_blank(),\n        aspect.ratio=3/4,\n        axis.title = element_text(face=\"bold\"),\n        title = element_text(face=\"bold\"),\n      )+\n      annotate(\"text\", x = 30, y = 200, label = \"Fast and short\", family=\"mono\")+\n      annotate(\"text\", x = 160, y = 200, label = \"Fast but long\", family=\"mono\")+\n      annotate(\"text\", x = 30, y = 45, label = \"Slow but short\", family=\"mono\")+\n      annotate(\"text\", x = 160, y = 45, label = \"Slow and long\", family=\"mono\")\n    \n    ggplotly(p)%>%\n      layout(\n        hoverlabel = list(font=list(size=14))\n      )\n    })\n  observeEvent(input$school, {\n    justSelected<-subset(fight.songs,fight.songs$school==input$school)\n    totalWord<-sum(justSelected[,c(12,14,15,17:22)] == 'Yes')\n    output$text1 <- renderUI({\n      str<-paste(\"<h4>Fight song clichés</h4><p>How many common clichés are in your school fight songs.</p>\")\n      str1<-paste(\"Fight:\", justSelected$fight)\n      str2<-paste(\"Victory:\", justSelected$victory)\n      str3<-paste(\"Win:\", justSelected$win_won)\n      str4<-paste(\"Rah:\", justSelected$rah)\n      str5<-paste(\"Nonsense syllables:\", justSelected$nonsense)\n      str6<-paste(\"School colors:\", justSelected$colors)\n      str7<-paste(\"Men, boys, sons:\", justSelected$men)\n      str8<-paste(\"Name of opponent:\", justSelected$opponents)\n      str9<-paste(\"Spell something out:\", justSelected$spelling)\n      str10<-paste(\"<hr/><b>Total clichés:</b>\",totalWord)\n      HTML(paste(str,str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, sep=\"<br/>\"))\n      })\n  })\n}\n# Run the application \nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Recent Projects",
    "section": "",
    "text": "Pinots and Points\n\n\n\nR\n\n\nggplot2\n\n\nggiraph\n\n\n\nAre there +90 point budget wines?\n\n\n\n\n\n\nFeb 19, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Quest for the GOAT\n\n\n\nR\n\n\nggplot2\n\n\nflextable\n\n\n\nSolving the never-ending debate of the greatest basketball player of all time\n\n\n\n\n\n\nFeb 12, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFIFA World Cup\n\n\n\nR\n\n\nSports\n\n\nggplot2\n\n\nTidyTuesday\n\n\n\nA look at FIFA World Cup history from 1930 to 2018\n\n\n\n\n\n\nFeb 5, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s Recreate: Fight Songs\n\n\n\nR\n\n\nggplot2\n\n\nFiveThirtyEight\n\n\nShiny\n\n\nPlotly\n\n\n\nA recreation and alternate graph for school fight songs\n\n\n\n\n\n\nOct 11, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "This is my portfolio. Exciting things to come."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "About this site"
  }
]